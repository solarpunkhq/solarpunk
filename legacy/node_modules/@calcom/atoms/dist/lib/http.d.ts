declare const http: {
    instance: import("axios").AxiosInstance;
    get: <T = any, R = import("axios").AxiosResponse<T, any>, D = any>(url: string, config?: import("axios").AxiosRequestConfig<D> | undefined) => Promise<R>;
    post: <T_1 = any, R_1 = import("axios").AxiosResponse<T_1, any>, D_1 = any>(url: string, data?: D_1 | undefined, config?: import("axios").AxiosRequestConfig<D_1> | undefined) => Promise<R_1>;
    put: <T_2 = any, R_2 = import("axios").AxiosResponse<T_2, any>, D_2 = any>(url: string, data?: D_2 | undefined, config?: import("axios").AxiosRequestConfig<D_2> | undefined) => Promise<R_2>;
    patch: <T_3 = any, R_3 = import("axios").AxiosResponse<T_3, any>, D_3 = any>(url: string, data?: D_3 | undefined, config?: import("axios").AxiosRequestConfig<D_3> | undefined) => Promise<R_3>;
    delete: <T_4 = any, R_4 = import("axios").AxiosResponse<T_4, any>, D_4 = any>(url: string, config?: import("axios").AxiosRequestConfig<D_4> | undefined) => Promise<R_4>;
    responseInterceptor: import("axios").AxiosInterceptorManager<import("axios").AxiosResponse<any, any>>;
    setRefreshUrl: (url: string) => void;
    getRefreshUrl: () => string;
    setUrl: (url: string) => void;
    getUrl: () => string | undefined;
    setAuthorizationHeader: (accessToken: string) => void;
    getAuthorizationHeader: () => string;
    setClientIdHeader: (clientId: string) => void;
    getClientIdHeader: () => string;
    refreshTokens: (refreshUrl: string) => Promise<string>;
};
export default http;
//# sourceMappingURL=http.d.ts.map