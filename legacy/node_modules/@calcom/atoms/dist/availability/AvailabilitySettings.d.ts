/// <reference types="react" />
import type { RouterOutputs } from "@calcom/trpc/react";
import type { TimeRange, WorkingHours } from "@calcom/types/schedule";
import type { AvailabilityFormValues } from "./types";
export type Schedule = {
    id: number;
    startTime: Date;
    endTime: Date;
    userId: number | null;
    eventTypeId: number | null;
    date: Date | null;
    scheduleId: number | null;
    days: number[];
};
export type CustomClassNames = {
    containerClassName?: string;
    ctaClassName?: string;
    editableHeadingClassName?: string;
    formClassName?: string;
    timezoneSelectClassName?: string;
    subtitlesClassName?: string;
    scheduleClassNames?: {
        scheduleContainer?: string;
        scheduleDay?: string;
        dayRanges?: string;
        timeRanges?: string;
        labelAndSwitchContainer?: string;
    };
};
type AvailabilitySettingsProps = {
    skeletonLabel?: string;
    schedule: {
        name: string;
        id: number;
        availability: TimeRange[][];
        isLastSchedule: boolean;
        isDefault: boolean;
        workingHours: WorkingHours[];
        dateOverrides: {
            ranges: TimeRange[];
        }[];
        timeZone: string;
        schedule: Schedule[];
    };
    travelSchedules?: RouterOutputs["viewer"]["getTravelSchedules"];
    handleDelete: () => void;
    isDeleting: boolean;
    isSaving: boolean;
    isLoading: boolean;
    timeFormat: number | null;
    weekStart: string;
    backPath: string | boolean;
    handleSubmit: (data: AvailabilityFormValues) => Promise<void>;
    isPlatform?: boolean;
    customClassNames?: CustomClassNames;
};
export declare function AvailabilitySettings({ schedule, travelSchedules, handleDelete, isDeleting, isLoading, isSaving, timeFormat, weekStart, backPath, handleSubmit, isPlatform, customClassNames, }: AvailabilitySettingsProps): JSX.Element;
export {};
//# sourceMappingURL=AvailabilitySettings.d.ts.map