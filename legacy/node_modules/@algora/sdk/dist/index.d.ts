import * as _trpc_client from '@trpc/client';
import * as superjson_dist_custom_transformer_registry from 'superjson/dist/custom-transformer-registry';
import * as superjson_dist_class_registry from 'superjson/dist/class-registry';
import * as superjson_dist_types from 'superjson/dist/types';
import * as _trpc_server from '@trpc/server';
import { inferRouterInputs, inferRouterOutputs } from '@trpc/server';
import * as trpc_openapi from 'trpc-openapi';

declare const appRouter: _trpc_server.CreateRouterInner<
  _trpc_server.RootConfig<{
    ctx: Record<string, never>;
    meta: trpc_openapi.OpenApiMeta;
    errorShape: _trpc_server.DefaultErrorShape;
    transformer: {
      stringify: (object: any) => string;
      parse: <T = unknown>(string: string) => T;
      serialize: (
        object: any,
      ) => superjson_dist_types.SuperJSONResult;
      deserialize: <T_1 = unknown>(
        payload: superjson_dist_types.SuperJSONResult,
      ) => T_1;
      registerClass: (
        v: superjson_dist_types.Class,
        options?:
          | string
          | superjson_dist_class_registry.RegisterOptions
          | undefined,
      ) => void;
      registerSymbol: (v: symbol, identifier?: string | undefined) => void;
      registerCustom: <I, O extends superjson_dist_types.JSONValue>(
        transformer: Omit<
          superjson_dist_custom_transformer_registry.CustomTransfomer<
            I,
            O
          >,
          "name"
        >,
        name: string,
      ) => void;
      allowErrorProps: (...props: string[]) => void;
    };
  }>,
  {
    bounty: _trpc_server.CreateRouterInner<
      _trpc_server.RootConfig<{
        ctx: Record<string, never>;
        meta: trpc_openapi.OpenApiMeta;
        errorShape: _trpc_server.DefaultErrorShape;
        transformer: {
          stringify: (object: any) => string;
          parse: <T = unknown>(string: string) => T;
          serialize: (
            object: any,
          ) => superjson_dist_types.SuperJSONResult;
          deserialize: <T_1 = unknown>(
            payload: superjson_dist_types.SuperJSONResult,
          ) => T_1;
          registerClass: (
            v: superjson_dist_types.Class,
            options?:
              | string
              | superjson_dist_class_registry.RegisterOptions
              | undefined,
          ) => void;
          registerSymbol: (v: symbol, identifier?: string | undefined) => void;
          registerCustom: <
            I,
            O extends superjson_dist_types.JSONValue,
          >(
            transformer: Omit<
              superjson_dist_custom_transformer_registry.CustomTransfomer<
                I,
                O
              >,
              "name"
            >,
            name: string,
          ) => void;
          allowErrorProps: (...props: string[]) => void;
        };
      }>,
      {
        create: _trpc_server.BuildProcedure<
          "mutation",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: _trpc_server.Overwrite<
              Record<string, never>,
              Record<string, never>
            >;
            _input_in: {
              kind: "dev" | "content";
              github_user: {
                id: number;
                login: string;
              };
              task: {
                number: number;
                repo_owner: string;
                repo_name: string;
              };
              actor: {
                type: "user" | "org";
                id: string;
              };
              is_external: boolean;
              visibility: "public" | "unlisted";
              amount?: number | undefined;
              comment?:
                | {
                    id: number;
                  }
                | undefined;
            };
            _input_out: {
              kind: "dev" | "content";
              github_user: {
                id: number;
                login: string;
              };
              task: {
                number: number;
                repo_owner: string;
                repo_name: string;
              };
              actor: {
                type: "user" | "org";
                id: string;
              };
              is_external: boolean;
              visibility: "public" | "unlisted";
              amount?: number | undefined;
              comment?:
                | {
                    id: number;
                  }
                | undefined;
            };
            _output_in: {
              kind: "dev" | "content";
              status: "active" | "inactive";
              type: "standard" | "tip";
              id: string;
              task: {
                number: number;
                id: string;
                repo_owner: string;
                repo_name: string;
                forge: "github";
                title: string;
                body: string;
                source:
                  | {
                      type: "unknown";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "issue";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "pull_request";
                    };
                url: string;
                type?: "issue" | "pull_request" | undefined;
              };
              org: {
                name: string | null;
                id: string;
                created_at: Date;
                handle: string;
                description: string | null;
                avatar_url: string | null;
                stargazers_count: number | null;
                tech: string[];
                accepts_sponsorships: boolean;
                members: {
                  id: string;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  created_at: Date;
                  is_admin: boolean;
                  weight: number;
                }[];
              };
              reward: {
                amount: number;
                currency: "USD";
              } | null;
              reward_formatted: string | null;
              reward_tiers: {
                amount: number;
                currency: "USD";
                lower_bound: number;
                upper_bound: number | null;
                metric: "youtube_subs" | "youtube_views_last30";
              }[];
              created_at: Date;
              bids: {
                status: "pending" | "accepted";
                id: string;
                amount: number;
                user: {
                  name: string | null;
                  id: string;
                  handle: string;
                  image: string | null;
                  github_handle: string | null;
                  youtube_handle: string | null;
                  twitch_handle: string | null;
                  orgs: {
                    name: string | null;
                    id: string;
                    handle: string;
                    avatar_url: string | null;
                  }[];
                };
                currency: "USD";
                created_at: Date;
              }[];
              updated_at: Date;
            };
            _output_out: {
              kind: "dev" | "content";
              status: "active" | "inactive";
              type: "standard" | "tip";
              id: string;
              task: {
                number: number;
                id: string;
                repo_owner: string;
                repo_name: string;
                forge: "github";
                title: string;
                body: string;
                source:
                  | {
                      type: "unknown";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "issue";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "pull_request";
                    };
                url: string;
                type?: "issue" | "pull_request" | undefined;
              };
              org: {
                name: string | null;
                id: string;
                created_at: Date;
                handle: string;
                description: string | null;
                avatar_url: string | null;
                stargazers_count: number | null;
                tech: string[];
                accepts_sponsorships: boolean;
                members: {
                  id: string;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  created_at: Date;
                  is_admin: boolean;
                  weight: number;
                }[];
              };
              reward: {
                amount: number;
                currency: "USD";
              } | null;
              reward_formatted: string | null;
              reward_tiers: {
                amount: number;
                currency: "USD";
                lower_bound: number;
                upper_bound: number | null;
                metric: "youtube_subs" | "youtube_views_last30";
              }[];
              created_at: Date;
              bids: {
                status: "pending" | "accepted";
                id: string;
                amount: number;
                user: {
                  name: string | null;
                  id: string;
                  handle: string;
                  image: string | null;
                  github_handle: string | null;
                  youtube_handle: string | null;
                  twitch_handle: string | null;
                  orgs: {
                    name: string | null;
                    id: string;
                    handle: string;
                    avatar_url: string | null;
                  }[];
                };
                currency: "USD";
                created_at: Date;
              }[];
              updated_at: Date;
            };
          },
          unknown
        >;
        get: _trpc_server.BuildProcedure<
          "query",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: Record<string, never>;
            _input_in: {
              id: string;
            };
            _input_out: {
              id: string;
            };
            _output_in: {
              kind: "dev" | "content";
              status: "active" | "inactive";
              type: "standard" | "tip";
              id: string;
              task: {
                number: number;
                id: string;
                repo_owner: string;
                repo_name: string;
                forge: "github";
                title: string;
                body: string;
                source:
                  | {
                      type: "unknown";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "issue";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "pull_request";
                    };
                url: string;
                type?: "issue" | "pull_request" | undefined;
              };
              org: {
                name: string | null;
                id: string;
                created_at: Date;
                handle: string;
                description: string | null;
                avatar_url: string | null;
                stargazers_count: number | null;
                tech: string[];
                accepts_sponsorships: boolean;
                members: {
                  id: string;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  created_at: Date;
                  is_admin: boolean;
                  weight: number;
                }[];
              };
              reward: {
                amount: number;
                currency: "USD";
              } | null;
              reward_formatted: string | null;
              reward_tiers: {
                amount: number;
                currency: "USD";
                lower_bound: number;
                upper_bound: number | null;
                metric: "youtube_subs" | "youtube_views_last30";
              }[];
              created_at: Date;
              bids: {
                status: "pending" | "accepted";
                id: string;
                amount: number;
                user: {
                  name: string | null;
                  id: string;
                  handle: string;
                  image: string | null;
                  github_handle: string | null;
                  youtube_handle: string | null;
                  twitch_handle: string | null;
                  orgs: {
                    name: string | null;
                    id: string;
                    handle: string;
                    avatar_url: string | null;
                  }[];
                };
                currency: "USD";
                created_at: Date;
              }[];
              updated_at: Date;
            };
            _output_out: {
              kind: "dev" | "content";
              status: "active" | "inactive";
              type: "standard" | "tip";
              id: string;
              task: {
                number: number;
                id: string;
                repo_owner: string;
                repo_name: string;
                forge: "github";
                title: string;
                body: string;
                source:
                  | {
                      type: "unknown";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "issue";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "pull_request";
                    };
                url: string;
                type?: "issue" | "pull_request" | undefined;
              };
              org: {
                name: string | null;
                id: string;
                created_at: Date;
                handle: string;
                description: string | null;
                avatar_url: string | null;
                stargazers_count: number | null;
                tech: string[];
                accepts_sponsorships: boolean;
                members: {
                  id: string;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  created_at: Date;
                  is_admin: boolean;
                  weight: number;
                }[];
              };
              reward: {
                amount: number;
                currency: "USD";
              } | null;
              reward_formatted: string | null;
              reward_tiers: {
                amount: number;
                currency: "USD";
                lower_bound: number;
                upper_bound: number | null;
                metric: "youtube_subs" | "youtube_views_last30";
              }[];
              created_at: Date;
              bids: {
                status: "pending" | "accepted";
                id: string;
                amount: number;
                user: {
                  name: string | null;
                  id: string;
                  handle: string;
                  image: string | null;
                  github_handle: string | null;
                  youtube_handle: string | null;
                  twitch_handle: string | null;
                  orgs: {
                    name: string | null;
                    id: string;
                    handle: string;
                    avatar_url: string | null;
                  }[];
                };
                currency: "USD";
                created_at: Date;
              }[];
              updated_at: Date;
            };
          },
          unknown
        >;
        getClaim: _trpc_server.BuildProcedure<
          "query",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: Record<string, never>;
            _input_in: {
              id: string;
            };
            _input_out: {
              id: string;
            };
            _output_in: {
              status:
                | "pending"
                | "accepted"
                | "payment_processing"
                | "payment_succeeded";
              id: string;
              created_at: Date;
              updated_at: Date;
              solver: {
                id: number;
                login: string;
                avatar_url: string;
                html_url: string;
                name?: string | null | undefined;
                company?: string | null | undefined;
                location?: string | null | undefined;
                twitter_username?: string | null | undefined;
              };
              bounty: {
                kind: "dev" | "content";
                status: "active" | "inactive";
                type: "standard" | "tip";
                id: string;
                task: {
                  number: number;
                  id: string;
                  repo_owner: string;
                  repo_name: string;
                  forge: "github";
                  title: string;
                  body: string;
                  source:
                    | {
                        type: "unknown";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "issue";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "pull_request";
                      };
                  url: string;
                  type?: "issue" | "pull_request" | undefined;
                };
                org: {
                  name: string | null;
                  id: string;
                  created_at: Date;
                  handle: string;
                  description: string | null;
                  avatar_url: string | null;
                  stargazers_count: number | null;
                  tech: string[];
                  accepts_sponsorships: boolean;
                  members: {
                    id: string;
                    user: {
                      name: string | null;
                      id: string;
                      handle: string;
                      image: string | null;
                      github_handle: string | null;
                      youtube_handle: string | null;
                      twitch_handle: string | null;
                      orgs: {
                        name: string | null;
                        id: string;
                        handle: string;
                        avatar_url: string | null;
                      }[];
                    };
                    created_at: Date;
                    is_admin: boolean;
                    weight: number;
                  }[];
                };
                reward: {
                  amount: number;
                  currency: "USD";
                } | null;
                reward_formatted: string | null;
                reward_tiers: {
                  amount: number;
                  currency: "USD";
                  lower_bound: number;
                  upper_bound: number | null;
                  metric: "youtube_subs" | "youtube_views_last30";
                }[];
                created_at: Date;
                bids: {
                  status: "pending" | "accepted";
                  id: string;
                  amount: number;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  currency: "USD";
                  created_at: Date;
                }[];
                updated_at: Date;
              };
              url?: string | undefined;
              pull_request_id?: number | undefined;
              transfer_amount?: number | undefined;
              transfer_currency?: "USD" | undefined;
              transfer?:
                | {
                    amount: number;
                    currency: "USD";
                  }
                | undefined;
            };
            _output_out: {
              status:
                | "pending"
                | "accepted"
                | "payment_processing"
                | "payment_succeeded";
              id: string;
              created_at: Date;
              updated_at: Date;
              solver: {
                id: number;
                login: string;
                avatar_url: string;
                html_url: string;
                name?: string | null | undefined;
                company?: string | null | undefined;
                location?: string | null | undefined;
                twitter_username?: string | null | undefined;
              };
              bounty: {
                kind: "dev" | "content";
                status: "active" | "inactive";
                type: "standard" | "tip";
                id: string;
                task: {
                  number: number;
                  id: string;
                  repo_owner: string;
                  repo_name: string;
                  forge: "github";
                  title: string;
                  body: string;
                  source:
                    | {
                        type: "unknown";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "issue";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "pull_request";
                      };
                  url: string;
                  type?: "issue" | "pull_request" | undefined;
                };
                org: {
                  name: string | null;
                  id: string;
                  created_at: Date;
                  handle: string;
                  description: string | null;
                  avatar_url: string | null;
                  stargazers_count: number | null;
                  tech: string[];
                  accepts_sponsorships: boolean;
                  members: {
                    id: string;
                    user: {
                      name: string | null;
                      id: string;
                      handle: string;
                      image: string | null;
                      github_handle: string | null;
                      youtube_handle: string | null;
                      twitch_handle: string | null;
                      orgs: {
                        name: string | null;
                        id: string;
                        handle: string;
                        avatar_url: string | null;
                      }[];
                    };
                    created_at: Date;
                    is_admin: boolean;
                    weight: number;
                  }[];
                };
                reward: {
                  amount: number;
                  currency: "USD";
                } | null;
                reward_formatted: string | null;
                reward_tiers: {
                  amount: number;
                  currency: "USD";
                  lower_bound: number;
                  upper_bound: number | null;
                  metric: "youtube_subs" | "youtube_views_last30";
                }[];
                created_at: Date;
                bids: {
                  status: "pending" | "accepted";
                  id: string;
                  amount: number;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  currency: "USD";
                  created_at: Date;
                }[];
                updated_at: Date;
              };
              url?: string | undefined;
              pull_request_id?: number | undefined;
              transfer_amount?: number | undefined;
              transfer_currency?: "USD" | undefined;
              transfer?:
                | {
                    amount: number;
                    currency: "USD";
                  }
                | undefined;
            };
          },
          unknown
        >;
        list: _trpc_server.BuildProcedure<
          "query",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: Record<string, never>;
            _input_in: {
              org: string;
              limit?: unknown;
              cursor?: string | undefined;
              status?: "active" | "inactive" | undefined;
              rewarded?: boolean | undefined;
            };
            _input_out: {
              org: string;
              limit?: number | undefined;
              cursor?: string | undefined;
              status?: "active" | "inactive" | undefined;
              rewarded?: boolean | undefined;
            };
            _output_in: {
              items: {
                kind: "dev" | "content";
                status: "active" | "inactive";
                type: "standard" | "tip";
                id: string;
                task: {
                  number: number;
                  id: string;
                  repo_owner: string;
                  repo_name: string;
                  forge: "github";
                  title: string;
                  body: string;
                  source:
                    | {
                        type: "unknown";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "issue";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "pull_request";
                      };
                  url: string;
                  type?: "issue" | "pull_request" | undefined;
                };
                org: {
                  name: string | null;
                  id: string;
                  created_at: Date;
                  handle: string;
                  description: string | null;
                  avatar_url: string | null;
                  stargazers_count: number | null;
                  tech: string[];
                  accepts_sponsorships: boolean;
                  members: {
                    id: string;
                    user: {
                      name: string | null;
                      id: string;
                      handle: string;
                      image: string | null;
                      github_handle: string | null;
                      youtube_handle: string | null;
                      twitch_handle: string | null;
                      orgs: {
                        name: string | null;
                        id: string;
                        handle: string;
                        avatar_url: string | null;
                      }[];
                    };
                    created_at: Date;
                    is_admin: boolean;
                    weight: number;
                  }[];
                };
                reward: {
                  amount: number;
                  currency: "USD";
                } | null;
                reward_formatted: string | null;
                reward_tiers: {
                  amount: number;
                  currency: "USD";
                  lower_bound: number;
                  upper_bound: number | null;
                  metric: "youtube_subs" | "youtube_views_last30";
                }[];
                created_at: Date;
                bids: {
                  status: "pending" | "accepted";
                  id: string;
                  amount: number;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  currency: "USD";
                  created_at: Date;
                }[];
                updated_at: Date;
              }[];
              next_cursor?: string | undefined;
            };
            _output_out: {
              items: {
                kind: "dev" | "content";
                status: "active" | "inactive";
                type: "standard" | "tip";
                id: string;
                task: {
                  number: number;
                  id: string;
                  repo_owner: string;
                  repo_name: string;
                  forge: "github";
                  title: string;
                  body: string;
                  source:
                    | {
                        type: "unknown";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "issue";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "pull_request";
                      };
                  url: string;
                  type?: "issue" | "pull_request" | undefined;
                };
                org: {
                  name: string | null;
                  id: string;
                  created_at: Date;
                  handle: string;
                  description: string | null;
                  avatar_url: string | null;
                  stargazers_count: number | null;
                  tech: string[];
                  accepts_sponsorships: boolean;
                  members: {
                    id: string;
                    user: {
                      name: string | null;
                      id: string;
                      handle: string;
                      image: string | null;
                      github_handle: string | null;
                      youtube_handle: string | null;
                      twitch_handle: string | null;
                      orgs: {
                        name: string | null;
                        id: string;
                        handle: string;
                        avatar_url: string | null;
                      }[];
                    };
                    created_at: Date;
                    is_admin: boolean;
                    weight: number;
                  }[];
                };
                reward: {
                  amount: number;
                  currency: "USD";
                } | null;
                reward_formatted: string | null;
                reward_tiers: {
                  amount: number;
                  currency: "USD";
                  lower_bound: number;
                  upper_bound: number | null;
                  metric: "youtube_subs" | "youtube_views_last30";
                }[];
                created_at: Date;
                bids: {
                  status: "pending" | "accepted";
                  id: string;
                  amount: number;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  currency: "USD";
                  created_at: Date;
                }[];
                updated_at: Date;
              }[];
              next_cursor?: string | undefined;
            };
          },
          unknown
        >;
        listWithClaims: _trpc_server.BuildProcedure<
          "query",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: Record<string, never>;
            _input_in: {
              limit?: unknown;
              cursor?: string | undefined;
              org?: string | undefined;
              status?: "open" | "completed" | undefined;
              kind?: "dev" | "content" | undefined;
            };
            _input_out: {
              limit?: number | undefined;
              cursor?: string | undefined;
              org?: string | undefined;
              status?: "open" | "completed" | undefined;
              kind?: "dev" | "content" | undefined;
            };
            _output_in: {
              items: {
                kind: "dev" | "content";
                status: "active" | "inactive";
                type: "standard" | "tip";
                id: string;
                task: {
                  number: number;
                  id: string;
                  repo_owner: string;
                  repo_name: string;
                  forge: "github";
                  title: string;
                  body: string;
                  source:
                    | {
                        type: "unknown";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "issue";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "pull_request";
                      };
                  url: string;
                  type?: "issue" | "pull_request" | undefined;
                };
                org: {
                  name: string | null;
                  id: string;
                  created_at: Date;
                  handle: string;
                  description: string | null;
                  avatar_url: string | null;
                  stargazers_count: number | null;
                  tech: string[];
                  accepts_sponsorships: boolean;
                  members: {
                    id: string;
                    user: {
                      name: string | null;
                      id: string;
                      handle: string;
                      image: string | null;
                      github_handle: string | null;
                      youtube_handle: string | null;
                      twitch_handle: string | null;
                      orgs: {
                        name: string | null;
                        id: string;
                        handle: string;
                        avatar_url: string | null;
                      }[];
                    };
                    created_at: Date;
                    is_admin: boolean;
                    weight: number;
                  }[];
                };
                reward: {
                  amount: number;
                  currency: "USD";
                } | null;
                reward_formatted: string | null;
                reward_tiers: {
                  amount: number;
                  currency: "USD";
                  lower_bound: number;
                  upper_bound: number | null;
                  metric: "youtube_subs" | "youtube_views_last30";
                }[];
                created_at: Date;
                bids: {
                  status: "pending" | "accepted";
                  id: string;
                  amount: number;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  currency: "USD";
                  created_at: Date;
                }[];
                updated_at: Date;
                claims: {
                  status:
                    | "pending"
                    | "accepted"
                    | "payment_processing"
                    | "payment_succeeded";
                  id: string;
                  created_at: Date;
                  updated_at: Date;
                  solver: {
                    id: number;
                    login: string;
                    avatar_url: string;
                    html_url: string;
                    name?: string | null | undefined;
                    company?: string | null | undefined;
                    location?: string | null | undefined;
                    twitter_username?: string | null | undefined;
                  };
                  url?: string | undefined;
                  pull_request_id?: number | undefined;
                  transfer_amount?: number | undefined;
                  transfer_currency?: "USD" | undefined;
                  transfer?:
                    | {
                        amount: number;
                        currency: "USD";
                      }
                    | undefined;
                }[];
              }[];
              next_cursor?: string | undefined;
            };
            _output_out: {
              items: {
                kind: "dev" | "content";
                status: "active" | "inactive";
                type: "standard" | "tip";
                id: string;
                task: {
                  number: number;
                  id: string;
                  repo_owner: string;
                  repo_name: string;
                  forge: "github";
                  title: string;
                  body: string;
                  source:
                    | {
                        type: "unknown";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "issue";
                      }
                    | {
                        data: {
                          id: number;
                          user: {
                            id: number;
                            login: string;
                            avatar_url: string;
                            html_url: string;
                            name?: string | null | undefined;
                            company?: string | null | undefined;
                            location?: string | null | undefined;
                            twitter_username?: string | null | undefined;
                          };
                          html_url: string;
                          title: string;
                          body?: string | null | undefined;
                        };
                        type: "pull_request";
                      };
                  url: string;
                  type?: "issue" | "pull_request" | undefined;
                };
                org: {
                  name: string | null;
                  id: string;
                  created_at: Date;
                  handle: string;
                  description: string | null;
                  avatar_url: string | null;
                  stargazers_count: number | null;
                  tech: string[];
                  accepts_sponsorships: boolean;
                  members: {
                    id: string;
                    user: {
                      name: string | null;
                      id: string;
                      handle: string;
                      image: string | null;
                      github_handle: string | null;
                      youtube_handle: string | null;
                      twitch_handle: string | null;
                      orgs: {
                        name: string | null;
                        id: string;
                        handle: string;
                        avatar_url: string | null;
                      }[];
                    };
                    created_at: Date;
                    is_admin: boolean;
                    weight: number;
                  }[];
                };
                reward: {
                  amount: number;
                  currency: "USD";
                } | null;
                reward_formatted: string | null;
                reward_tiers: {
                  amount: number;
                  currency: "USD";
                  lower_bound: number;
                  upper_bound: number | null;
                  metric: "youtube_subs" | "youtube_views_last30";
                }[];
                created_at: Date;
                bids: {
                  status: "pending" | "accepted";
                  id: string;
                  amount: number;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  currency: "USD";
                  created_at: Date;
                }[];
                updated_at: Date;
                claims: {
                  status:
                    | "pending"
                    | "accepted"
                    | "payment_processing"
                    | "payment_succeeded";
                  id: string;
                  created_at: Date;
                  updated_at: Date;
                  solver: {
                    id: number;
                    login: string;
                    avatar_url: string;
                    html_url: string;
                    name?: string | null | undefined;
                    company?: string | null | undefined;
                    location?: string | null | undefined;
                    twitter_username?: string | null | undefined;
                  };
                  url?: string | undefined;
                  pull_request_id?: number | undefined;
                  transfer_amount?: number | undefined;
                  transfer_currency?: "USD" | undefined;
                  transfer?:
                    | {
                        amount: number;
                        currency: "USD";
                      }
                    | undefined;
                }[];
              }[];
              next_cursor?: string | undefined;
            };
          },
          unknown
        >;
        update: _trpc_server.BuildProcedure<
          "mutation",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: _trpc_server.Overwrite<
              _trpc_server.Overwrite<
                Record<string, never>,
                Record<string, never>
              >,
              Record<string, never>
            >;
            _input_in: {
              org_id: string;
              id: string;
              reward?:
                | {
                    amount: number;
                    currency: "USD";
                  }
                | undefined;
              status?: "active" | "inactive" | undefined;
            };
            _input_out: {
              org_id: string;
              id: string;
              reward?:
                | {
                    amount: number;
                    currency: "USD";
                  }
                | undefined;
              status?: "active" | "inactive" | undefined;
            };
            _output_in: {
              kind: "dev" | "content";
              status: "active" | "inactive";
              type: "standard" | "tip";
              id: string;
              task: {
                number: number;
                id: string;
                repo_owner: string;
                repo_name: string;
                forge: "github";
                title: string;
                body: string;
                source:
                  | {
                      type: "unknown";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "issue";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "pull_request";
                    };
                url: string;
                type?: "issue" | "pull_request" | undefined;
              };
              org: {
                name: string | null;
                id: string;
                created_at: Date;
                handle: string;
                description: string | null;
                avatar_url: string | null;
                stargazers_count: number | null;
                tech: string[];
                accepts_sponsorships: boolean;
                members: {
                  id: string;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  created_at: Date;
                  is_admin: boolean;
                  weight: number;
                }[];
              };
              reward: {
                amount: number;
                currency: "USD";
              } | null;
              reward_formatted: string | null;
              reward_tiers: {
                amount: number;
                currency: "USD";
                lower_bound: number;
                upper_bound: number | null;
                metric: "youtube_subs" | "youtube_views_last30";
              }[];
              created_at: Date;
              bids: {
                status: "pending" | "accepted";
                id: string;
                amount: number;
                user: {
                  name: string | null;
                  id: string;
                  handle: string;
                  image: string | null;
                  github_handle: string | null;
                  youtube_handle: string | null;
                  twitch_handle: string | null;
                  orgs: {
                    name: string | null;
                    id: string;
                    handle: string;
                    avatar_url: string | null;
                  }[];
                };
                currency: "USD";
                created_at: Date;
              }[];
              updated_at: Date;
            };
            _output_out: {
              kind: "dev" | "content";
              status: "active" | "inactive";
              type: "standard" | "tip";
              id: string;
              task: {
                number: number;
                id: string;
                repo_owner: string;
                repo_name: string;
                forge: "github";
                title: string;
                body: string;
                source:
                  | {
                      type: "unknown";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "issue";
                    }
                  | {
                      data: {
                        id: number;
                        user: {
                          id: number;
                          login: string;
                          avatar_url: string;
                          html_url: string;
                          name?: string | null | undefined;
                          company?: string | null | undefined;
                          location?: string | null | undefined;
                          twitter_username?: string | null | undefined;
                        };
                        html_url: string;
                        title: string;
                        body?: string | null | undefined;
                      };
                      type: "pull_request";
                    };
                url: string;
                type?: "issue" | "pull_request" | undefined;
              };
              org: {
                name: string | null;
                id: string;
                created_at: Date;
                handle: string;
                description: string | null;
                avatar_url: string | null;
                stargazers_count: number | null;
                tech: string[];
                accepts_sponsorships: boolean;
                members: {
                  id: string;
                  user: {
                    name: string | null;
                    id: string;
                    handle: string;
                    image: string | null;
                    github_handle: string | null;
                    youtube_handle: string | null;
                    twitch_handle: string | null;
                    orgs: {
                      name: string | null;
                      id: string;
                      handle: string;
                      avatar_url: string | null;
                    }[];
                  };
                  created_at: Date;
                  is_admin: boolean;
                  weight: number;
                }[];
              };
              reward: {
                amount: number;
                currency: "USD";
              } | null;
              reward_formatted: string | null;
              reward_tiers: {
                amount: number;
                currency: "USD";
                lower_bound: number;
                upper_bound: number | null;
                metric: "youtube_subs" | "youtube_views_last30";
              }[];
              created_at: Date;
              bids: {
                status: "pending" | "accepted";
                id: string;
                amount: number;
                user: {
                  name: string | null;
                  id: string;
                  handle: string;
                  image: string | null;
                  github_handle: string | null;
                  youtube_handle: string | null;
                  twitch_handle: string | null;
                  orgs: {
                    name: string | null;
                    id: string;
                    handle: string;
                    avatar_url: string | null;
                  }[];
                };
                currency: "USD";
                created_at: Date;
              }[];
              updated_at: Date;
            };
          },
          unknown
        >;
      }
    >;
    org: _trpc_server.CreateRouterInner<
      _trpc_server.RootConfig<{
        ctx: Record<string, never>;
        meta: trpc_openapi.OpenApiMeta;
        errorShape: _trpc_server.DefaultErrorShape;
        transformer: {
          stringify: (object: any) => string;
          parse: <T = unknown>(string: string) => T;
          serialize: (
            object: any,
          ) => superjson_dist_types.SuperJSONResult;
          deserialize: <T_1 = unknown>(
            payload: superjson_dist_types.SuperJSONResult,
          ) => T_1;
          registerClass: (
            v: superjson_dist_types.Class,
            options?:
              | string
              | superjson_dist_class_registry.RegisterOptions
              | undefined,
          ) => void;
          registerSymbol: (v: symbol, identifier?: string | undefined) => void;
          registerCustom: <
            I,
            O extends superjson_dist_types.JSONValue,
          >(
            transformer: Omit<
              superjson_dist_custom_transformer_registry.CustomTransfomer<
                I,
                O
              >,
              "name"
            >,
            name: string,
          ) => void;
          allowErrorProps: (...props: string[]) => void;
        };
      }>,
      {
        addMember: _trpc_server.BuildProcedure<
          "mutation",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: _trpc_server.Overwrite<
              _trpc_server.Overwrite<
                Record<string, never>,
                Record<string, never>
              >,
              Record<string, never>
            >;
            _input_in: {
              org_id: string;
              handle: string;
            };
            _input_out: {
              org_id: string;
              handle: string;
            };
            _output_in: {
              id: string;
              user: {
                name: string | null;
                id: string;
                handle: string;
                image: string | null;
                github_handle: string | null;
                youtube_handle: string | null;
                twitch_handle: string | null;
                orgs: {
                  name: string | null;
                  id: string;
                  handle: string;
                  avatar_url: string | null;
                }[];
              };
              created_at: Date;
              is_admin: boolean;
              weight: number;
            };
            _output_out: {
              id: string;
              user: {
                name: string | null;
                id: string;
                handle: string;
                image: string | null;
                github_handle: string | null;
                youtube_handle: string | null;
                twitch_handle: string | null;
                orgs: {
                  name: string | null;
                  id: string;
                  handle: string;
                  avatar_url: string | null;
                }[];
              };
              created_at: Date;
              is_admin: boolean;
              weight: number;
            };
          },
          unknown
        >;
        get: _trpc_server.BuildProcedure<
          "query",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: Record<string, never>;
            _input_in: {
              org: string;
            };
            _input_out: {
              org: string;
            };
            _output_in: {
              name: string | null;
              id: string;
              created_at: Date;
              handle: string;
              description: string | null;
              avatar_url: string | null;
              stargazers_count: number | null;
              tech: string[];
              accepts_sponsorships: boolean;
              members: {
                id: string;
                user: {
                  name: string | null;
                  id: string;
                  handle: string;
                  image: string | null;
                  github_handle: string | null;
                  youtube_handle: string | null;
                  twitch_handle: string | null;
                  orgs: {
                    name: string | null;
                    id: string;
                    handle: string;
                    avatar_url: string | null;
                  }[];
                };
                created_at: Date;
                is_admin: boolean;
                weight: number;
              }[];
            };
            _output_out: {
              name: string | null;
              id: string;
              created_at: Date;
              handle: string;
              description: string | null;
              avatar_url: string | null;
              stargazers_count: number | null;
              tech: string[];
              accepts_sponsorships: boolean;
              members: {
                id: string;
                user: {
                  name: string | null;
                  id: string;
                  handle: string;
                  image: string | null;
                  github_handle: string | null;
                  youtube_handle: string | null;
                  twitch_handle: string | null;
                  orgs: {
                    name: string | null;
                    id: string;
                    handle: string;
                    avatar_url: string | null;
                  }[];
                };
                created_at: Date;
                is_admin: boolean;
                weight: number;
              }[];
            };
          },
          unknown
        >;
        getEarningsByCountry: _trpc_server.BuildProcedure<
          "query",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: Record<string, never>;
            _input_in: {
              org?: string | undefined;
            };
            _input_out: {
              org?: string | undefined;
            };
            _output_in: {
              amount: number;
              country: string;
              lat: number;
              lng: number;
            }[];
            _output_out: {
              amount: number;
              country: string;
              lat: number;
              lng: number;
            }[];
          },
          unknown
        >;
        getLeaderboard: _trpc_server.BuildProcedure<
          "query",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: Record<string, never>;
            _input_in: {
              org?: string | undefined;
            };
            _input_out: {
              org?: string | undefined;
            };
            _output_in: {
              id: number;
              user: {
                id: number;
                login: string;
                avatar_url: string;
                html_url: string;
                name?: string | null | undefined;
                company?: string | null | undefined;
                location?: string | null | undefined;
                twitter_username?: string | null | undefined;
              };
              stats: {
                num_completed_bounties: number;
                total_earnings: number;
              };
            }[];
            _output_out: {
              id: number;
              user: {
                id: number;
                login: string;
                avatar_url: string;
                html_url: string;
                name?: string | null | undefined;
                company?: string | null | undefined;
                location?: string | null | undefined;
                twitter_username?: string | null | undefined;
              };
              stats: {
                num_completed_bounties: number;
                total_earnings: number;
              };
            }[];
          },
          unknown
        >;
        getMembers: _trpc_server.BuildProcedure<
          "query",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: _trpc_server.Overwrite<
              _trpc_server.Overwrite<
                Record<string, never>,
                Record<string, never>
              >,
              Record<string, never>
            >;
            _input_in: {
              org_id: string;
              id: string;
            };
            _input_out: {
              org_id: string;
              id: string;
            };
            _output_in: {
              id: string;
              user: {
                name: string | null;
                id: string;
                handle: string;
                image: string | null;
                github_handle: string | null;
                youtube_handle: string | null;
                twitch_handle: string | null;
                orgs: {
                  name: string | null;
                  id: string;
                  handle: string;
                  avatar_url: string | null;
                }[];
              };
              created_at: Date;
              is_admin: boolean;
              weight: number;
            }[];
            _output_out: {
              id: string;
              user: {
                name: string | null;
                id: string;
                handle: string;
                image: string | null;
                github_handle: string | null;
                youtube_handle: string | null;
                twitch_handle: string | null;
                orgs: {
                  name: string | null;
                  id: string;
                  handle: string;
                  avatar_url: string | null;
                }[];
              };
              created_at: Date;
              is_admin: boolean;
              weight: number;
            }[];
          },
          unknown
        >;
        getStats: _trpc_server.BuildProcedure<
          "query",
          {
            _config: _trpc_server.RootConfig<{
              ctx: Record<string, never>;
              meta: trpc_openapi.OpenApiMeta;
              errorShape: _trpc_server.DefaultErrorShape;
              transformer: {
                stringify: (object: any) => string;
                parse: <T = unknown>(string: string) => T;
                serialize: (
                  object: any,
                ) => superjson_dist_types.SuperJSONResult;
                deserialize: <T_1 = unknown>(
                  payload: superjson_dist_types.SuperJSONResult,
                ) => T_1;
                registerClass: (
                  v: superjson_dist_types.Class,
                  options?:
                    | string
                    | superjson_dist_class_registry.RegisterOptions
                    | undefined,
                ) => void;
                registerSymbol: (
                  v: symbol,
                  identifier?: string | undefined,
                ) => void;
                registerCustom: <
                  I,
                  O extends superjson_dist_types.JSONValue,
                >(
                  transformer: Omit<
                    superjson_dist_custom_transformer_registry.CustomTransfomer<
                      I,
                      O
                    >,
                    "name"
                  >,
                  name: string,
                ) => void;
                allowErrorProps: (...props: string[]) => void;
              };
            }>;
            _meta: trpc_openapi.OpenApiMeta;
            _ctx_out: Record<string, never>;
            _input_in: {
              id: string;
            };
            _input_out: {
              id: string;
            };
            _output_in: {
              open_bounties: {
                count: number;
                sum: number;
              };
              completed_bounties: {
                count: number;
                sum: number;
              };
              completed_tips: {
                count: number;
                sum: number;
              };
              solvers: {
                total: number;
                new: number;
              };
            };
            _output_out: {
              open_bounties: {
                count: number;
                sum: number;
              };
              completed_bounties: {
                count: number;
                sum: number;
              };
              completed_tips: {
                count: number;
                sum: number;
              };
              solvers: {
                total: number;
                new: number;
              };
            };
          },
          unknown
        >;
      }
    >;
  }
>;
type AppRouter = typeof appRouter;

type AlgoraInput = inferRouterInputs<AppRouter>;
type AlgoraOutput = inferRouterOutputs<AppRouter>;
declare const algora: {
    bounty: {
        create: {
            mutate: _trpc_client.Resolver<_trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T = unknown>(string: string) => T;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I, O extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I, O>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: {
                    [x: string]: never;
                };
                _input_in: {
                    kind: "dev" | "content";
                    github_user: {
                        id: number;
                        login: string;
                    };
                    task: {
                        number: number;
                        repo_owner: string;
                        repo_name: string;
                    };
                    actor: {
                        type: "org" | "user";
                        id: string;
                    };
                    is_external: boolean;
                    visibility: "public" | "unlisted";
                    amount?: number | undefined;
                    comment?: {
                        id: number;
                    } | undefined;
                };
                _input_out: {
                    kind: "dev" | "content";
                    github_user: {
                        id: number;
                        login: string;
                    };
                    task: {
                        number: number;
                        repo_owner: string;
                        repo_name: string;
                    };
                    actor: {
                        type: "org" | "user";
                        id: string;
                    };
                    is_external: boolean;
                    visibility: "public" | "unlisted";
                    amount?: number | undefined;
                    comment?: {
                        id: number;
                    } | undefined;
                };
                _output_in: {
                    kind: "dev" | "content";
                    status: "active" | "inactive";
                    type: "standard" | "tip";
                    id: string;
                    task: {
                        number: number;
                        id: string;
                        repo_owner: string;
                        repo_name: string;
                        forge: "github";
                        title: string;
                        body: string;
                        source: {
                            type: "unknown";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "issue";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "pull_request";
                        };
                        url: string;
                        type?: "issue" | "pull_request" | undefined;
                    };
                    org: {
                        name: string | null;
                        id: string;
                        created_at: Date;
                        handle: string;
                        description: string | null;
                        avatar_url: string | null;
                        stargazers_count: number | null;
                        tech: string[];
                        accepts_sponsorships: boolean;
                        members: {
                            id: string;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            created_at: Date;
                            is_admin: boolean;
                            weight: number;
                        }[];
                    };
                    reward: {
                        amount: number;
                        currency: "USD";
                    } | null;
                    reward_formatted: string | null;
                    reward_tiers: {
                        amount: number;
                        currency: "USD";
                        lower_bound: number;
                        upper_bound: number | null;
                        metric: "youtube_subs" | "youtube_views_last30";
                    }[];
                    created_at: Date;
                    bids: {
                        status: "pending" | "accepted";
                        id: string;
                        amount: number;
                        user: {
                            name: string | null;
                            id: string;
                            handle: string;
                            image: string | null;
                            github_handle: string | null;
                            youtube_handle: string | null;
                            twitch_handle: string | null;
                            orgs: {
                                name: string | null;
                                id: string;
                                handle: string;
                                avatar_url: string | null;
                            }[];
                        };
                        currency: "USD";
                        created_at: Date;
                    }[];
                    updated_at: Date;
                };
                _output_out: {
                    kind: "dev" | "content";
                    status: "active" | "inactive";
                    type: "standard" | "tip";
                    id: string;
                    task: {
                        number: number;
                        id: string;
                        repo_owner: string;
                        repo_name: string;
                        forge: "github";
                        title: string;
                        body: string;
                        source: {
                            type: "unknown";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "issue";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "pull_request";
                        };
                        url: string;
                        type?: "issue" | "pull_request" | undefined;
                    };
                    org: {
                        name: string | null;
                        id: string;
                        created_at: Date;
                        handle: string;
                        description: string | null;
                        avatar_url: string | null;
                        stargazers_count: number | null;
                        tech: string[];
                        accepts_sponsorships: boolean;
                        members: {
                            id: string;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            created_at: Date;
                            is_admin: boolean;
                            weight: number;
                        }[];
                    };
                    reward: {
                        amount: number;
                        currency: "USD";
                    } | null;
                    reward_formatted: string | null;
                    reward_tiers: {
                        amount: number;
                        currency: "USD";
                        lower_bound: number;
                        upper_bound: number | null;
                        metric: "youtube_subs" | "youtube_views_last30";
                    }[];
                    created_at: Date;
                    bids: {
                        status: "pending" | "accepted";
                        id: string;
                        amount: number;
                        user: {
                            name: string | null;
                            id: string;
                            handle: string;
                            image: string | null;
                            github_handle: string | null;
                            youtube_handle: string | null;
                            twitch_handle: string | null;
                            orgs: {
                                name: string | null;
                                id: string;
                                handle: string;
                                avatar_url: string | null;
                            }[];
                        };
                        currency: "USD";
                        created_at: Date;
                    }[];
                    updated_at: Date;
                };
            }, unknown>>;
        };
        get: {
            query: _trpc_client.Resolver<_trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T_2 = unknown>(string: string) => T_2;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1_1 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1_1;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I_1, O_1 extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I_1, O_1>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: Record<string, never>;
                _input_in: {
                    id: string;
                };
                _input_out: {
                    id: string;
                };
                _output_in: {
                    kind: "dev" | "content";
                    status: "active" | "inactive";
                    type: "standard" | "tip";
                    id: string;
                    task: {
                        number: number;
                        id: string;
                        repo_owner: string;
                        repo_name: string;
                        forge: "github";
                        title: string;
                        body: string;
                        source: {
                            type: "unknown";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "issue";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "pull_request";
                        };
                        url: string;
                        type?: "issue" | "pull_request" | undefined;
                    };
                    org: {
                        name: string | null;
                        id: string;
                        created_at: Date;
                        handle: string;
                        description: string | null;
                        avatar_url: string | null;
                        stargazers_count: number | null;
                        tech: string[];
                        accepts_sponsorships: boolean;
                        members: {
                            id: string;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            created_at: Date;
                            is_admin: boolean;
                            weight: number;
                        }[];
                    };
                    reward: {
                        amount: number;
                        currency: "USD";
                    } | null;
                    reward_formatted: string | null;
                    reward_tiers: {
                        amount: number;
                        currency: "USD";
                        lower_bound: number;
                        upper_bound: number | null;
                        metric: "youtube_subs" | "youtube_views_last30";
                    }[];
                    created_at: Date;
                    bids: {
                        status: "pending" | "accepted";
                        id: string;
                        amount: number;
                        user: {
                            name: string | null;
                            id: string;
                            handle: string;
                            image: string | null;
                            github_handle: string | null;
                            youtube_handle: string | null;
                            twitch_handle: string | null;
                            orgs: {
                                name: string | null;
                                id: string;
                                handle: string;
                                avatar_url: string | null;
                            }[];
                        };
                        currency: "USD";
                        created_at: Date;
                    }[];
                    updated_at: Date;
                };
                _output_out: {
                    kind: "dev" | "content";
                    status: "active" | "inactive";
                    type: "standard" | "tip";
                    id: string;
                    task: {
                        number: number;
                        id: string;
                        repo_owner: string;
                        repo_name: string;
                        forge: "github";
                        title: string;
                        body: string;
                        source: {
                            type: "unknown";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "issue";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "pull_request";
                        };
                        url: string;
                        type?: "issue" | "pull_request" | undefined;
                    };
                    org: {
                        name: string | null;
                        id: string;
                        created_at: Date;
                        handle: string;
                        description: string | null;
                        avatar_url: string | null;
                        stargazers_count: number | null;
                        tech: string[];
                        accepts_sponsorships: boolean;
                        members: {
                            id: string;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            created_at: Date;
                            is_admin: boolean;
                            weight: number;
                        }[];
                    };
                    reward: {
                        amount: number;
                        currency: "USD";
                    } | null;
                    reward_formatted: string | null;
                    reward_tiers: {
                        amount: number;
                        currency: "USD";
                        lower_bound: number;
                        upper_bound: number | null;
                        metric: "youtube_subs" | "youtube_views_last30";
                    }[];
                    created_at: Date;
                    bids: {
                        status: "pending" | "accepted";
                        id: string;
                        amount: number;
                        user: {
                            name: string | null;
                            id: string;
                            handle: string;
                            image: string | null;
                            github_handle: string | null;
                            youtube_handle: string | null;
                            twitch_handle: string | null;
                            orgs: {
                                name: string | null;
                                id: string;
                                handle: string;
                                avatar_url: string | null;
                            }[];
                        };
                        currency: "USD";
                        created_at: Date;
                    }[];
                    updated_at: Date;
                };
            }, unknown>>;
        };
        getClaim: {
            query: _trpc_client.Resolver<_trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T_3 = unknown>(string: string) => T_3;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1_2 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1_2;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I_2, O_2 extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I_2, O_2>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: Record<string, never>;
                _input_in: {
                    id: string;
                };
                _input_out: {
                    id: string;
                };
                _output_in: {
                    status: "pending" | "accepted" | "payment_processing" | "payment_succeeded";
                    id: string;
                    created_at: Date;
                    updated_at: Date;
                    solver: {
                        id: number;
                        login: string;
                        avatar_url: string;
                        html_url: string;
                        name?: string | null | undefined;
                        company?: string | null | undefined;
                        location?: string | null | undefined;
                        twitter_username?: string | null | undefined;
                    };
                    bounty: {
                        kind: "dev" | "content";
                        status: "active" | "inactive";
                        type: "standard" | "tip";
                        id: string;
                        task: {
                            number: number;
                            id: string;
                            repo_owner: string;
                            repo_name: string;
                            forge: "github";
                            title: string;
                            body: string;
                            source: {
                                type: "unknown";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "issue";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "pull_request";
                            };
                            url: string;
                            type?: "issue" | "pull_request" | undefined;
                        };
                        org: {
                            name: string | null;
                            id: string;
                            created_at: Date;
                            handle: string;
                            description: string | null;
                            avatar_url: string | null;
                            stargazers_count: number | null;
                            tech: string[];
                            accepts_sponsorships: boolean;
                            members: {
                                id: string;
                                user: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    image: string | null;
                                    github_handle: string | null;
                                    youtube_handle: string | null;
                                    twitch_handle: string | null;
                                    orgs: {
                                        name: string | null;
                                        id: string;
                                        handle: string;
                                        avatar_url: string | null;
                                    }[];
                                };
                                created_at: Date;
                                is_admin: boolean;
                                weight: number;
                            }[];
                        };
                        reward: {
                            amount: number;
                            currency: "USD";
                        } | null;
                        reward_formatted: string | null;
                        reward_tiers: {
                            amount: number;
                            currency: "USD";
                            lower_bound: number;
                            upper_bound: number | null;
                            metric: "youtube_subs" | "youtube_views_last30";
                        }[];
                        created_at: Date;
                        bids: {
                            status: "pending" | "accepted";
                            id: string;
                            amount: number;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            currency: "USD";
                            created_at: Date;
                        }[];
                        updated_at: Date;
                    };
                    url?: string | undefined;
                    pull_request_id?: number | undefined;
                    transfer_amount?: number | undefined;
                    transfer_currency?: "USD" | undefined;
                    transfer?: {
                        amount: number;
                        currency: "USD";
                    } | undefined;
                };
                _output_out: {
                    status: "pending" | "accepted" | "payment_processing" | "payment_succeeded";
                    id: string;
                    created_at: Date;
                    updated_at: Date;
                    solver: {
                        id: number;
                        login: string;
                        avatar_url: string;
                        html_url: string;
                        name?: string | null | undefined;
                        company?: string | null | undefined;
                        location?: string | null | undefined;
                        twitter_username?: string | null | undefined;
                    };
                    bounty: {
                        kind: "dev" | "content";
                        status: "active" | "inactive";
                        type: "standard" | "tip";
                        id: string;
                        task: {
                            number: number;
                            id: string;
                            repo_owner: string;
                            repo_name: string;
                            forge: "github";
                            title: string;
                            body: string;
                            source: {
                                type: "unknown";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "issue";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "pull_request";
                            };
                            url: string;
                            type?: "issue" | "pull_request" | undefined;
                        };
                        org: {
                            name: string | null;
                            id: string;
                            created_at: Date;
                            handle: string;
                            description: string | null;
                            avatar_url: string | null;
                            stargazers_count: number | null;
                            tech: string[];
                            accepts_sponsorships: boolean;
                            members: {
                                id: string;
                                user: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    image: string | null;
                                    github_handle: string | null;
                                    youtube_handle: string | null;
                                    twitch_handle: string | null;
                                    orgs: {
                                        name: string | null;
                                        id: string;
                                        handle: string;
                                        avatar_url: string | null;
                                    }[];
                                };
                                created_at: Date;
                                is_admin: boolean;
                                weight: number;
                            }[];
                        };
                        reward: {
                            amount: number;
                            currency: "USD";
                        } | null;
                        reward_formatted: string | null;
                        reward_tiers: {
                            amount: number;
                            currency: "USD";
                            lower_bound: number;
                            upper_bound: number | null;
                            metric: "youtube_subs" | "youtube_views_last30";
                        }[];
                        created_at: Date;
                        bids: {
                            status: "pending" | "accepted";
                            id: string;
                            amount: number;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            currency: "USD";
                            created_at: Date;
                        }[];
                        updated_at: Date;
                    };
                    url?: string | undefined;
                    pull_request_id?: number | undefined;
                    transfer_amount?: number | undefined;
                    transfer_currency?: "USD" | undefined;
                    transfer?: {
                        amount: number;
                        currency: "USD";
                    } | undefined;
                };
            }, unknown>>;
        };
        list: {
            query: _trpc_client.Resolver<_trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T_4 = unknown>(string: string) => T_4;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1_3 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1_3;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I_3, O_3 extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I_3, O_3>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: Record<string, never>;
                _input_in: {
                    org: string;
                    limit?: unknown;
                    cursor?: string | undefined;
                    status?: "active" | "inactive" | undefined;
                    rewarded?: boolean | undefined;
                };
                _input_out: {
                    org: string;
                    limit?: number | undefined;
                    cursor?: string | undefined;
                    status?: "active" | "inactive" | undefined;
                    rewarded?: boolean | undefined;
                };
                _output_in: {
                    items: {
                        kind: "dev" | "content";
                        status: "active" | "inactive";
                        type: "standard" | "tip";
                        id: string;
                        task: {
                            number: number;
                            id: string;
                            repo_owner: string;
                            repo_name: string;
                            forge: "github";
                            title: string;
                            body: string;
                            source: {
                                type: "unknown";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "issue";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "pull_request";
                            };
                            url: string;
                            type?: "issue" | "pull_request" | undefined;
                        };
                        org: {
                            name: string | null;
                            id: string;
                            created_at: Date;
                            handle: string;
                            description: string | null;
                            avatar_url: string | null;
                            stargazers_count: number | null;
                            tech: string[];
                            accepts_sponsorships: boolean;
                            members: {
                                id: string;
                                user: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    image: string | null;
                                    github_handle: string | null;
                                    youtube_handle: string | null;
                                    twitch_handle: string | null;
                                    orgs: {
                                        name: string | null;
                                        id: string;
                                        handle: string;
                                        avatar_url: string | null;
                                    }[];
                                };
                                created_at: Date;
                                is_admin: boolean;
                                weight: number;
                            }[];
                        };
                        reward: {
                            amount: number;
                            currency: "USD";
                        } | null;
                        reward_formatted: string | null;
                        reward_tiers: {
                            amount: number;
                            currency: "USD";
                            lower_bound: number;
                            upper_bound: number | null;
                            metric: "youtube_subs" | "youtube_views_last30";
                        }[];
                        created_at: Date;
                        bids: {
                            status: "pending" | "accepted";
                            id: string;
                            amount: number;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            currency: "USD";
                            created_at: Date;
                        }[];
                        updated_at: Date;
                    }[];
                    next_cursor?: string | undefined;
                };
                _output_out: {
                    items: {
                        kind: "dev" | "content";
                        status: "active" | "inactive";
                        type: "standard" | "tip";
                        id: string;
                        task: {
                            number: number;
                            id: string;
                            repo_owner: string;
                            repo_name: string;
                            forge: "github";
                            title: string;
                            body: string;
                            source: {
                                type: "unknown";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "issue";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "pull_request";
                            };
                            url: string;
                            type?: "issue" | "pull_request" | undefined;
                        };
                        org: {
                            name: string | null;
                            id: string;
                            created_at: Date;
                            handle: string;
                            description: string | null;
                            avatar_url: string | null;
                            stargazers_count: number | null;
                            tech: string[];
                            accepts_sponsorships: boolean;
                            members: {
                                id: string;
                                user: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    image: string | null;
                                    github_handle: string | null;
                                    youtube_handle: string | null;
                                    twitch_handle: string | null;
                                    orgs: {
                                        name: string | null;
                                        id: string;
                                        handle: string;
                                        avatar_url: string | null;
                                    }[];
                                };
                                created_at: Date;
                                is_admin: boolean;
                                weight: number;
                            }[];
                        };
                        reward: {
                            amount: number;
                            currency: "USD";
                        } | null;
                        reward_formatted: string | null;
                        reward_tiers: {
                            amount: number;
                            currency: "USD";
                            lower_bound: number;
                            upper_bound: number | null;
                            metric: "youtube_subs" | "youtube_views_last30";
                        }[];
                        created_at: Date;
                        bids: {
                            status: "pending" | "accepted";
                            id: string;
                            amount: number;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            currency: "USD";
                            created_at: Date;
                        }[];
                        updated_at: Date;
                    }[];
                    next_cursor?: string | undefined;
                };
            }, unknown>>;
        };
        listWithClaims: {
            query: _trpc_client.Resolver<_trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T_5 = unknown>(string: string) => T_5;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1_4 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1_4;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I_4, O_4 extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I_4, O_4>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: Record<string, never>;
                _input_in: {
                    limit?: unknown;
                    cursor?: string | undefined;
                    org?: string | undefined;
                    status?: "open" | "completed" | undefined;
                    kind?: "dev" | "content" | undefined;
                };
                _input_out: {
                    limit?: number | undefined;
                    cursor?: string | undefined;
                    org?: string | undefined;
                    status?: "open" | "completed" | undefined;
                    kind?: "dev" | "content" | undefined;
                };
                _output_in: {
                    items: {
                        kind: "dev" | "content";
                        status: "active" | "inactive";
                        type: "standard" | "tip";
                        id: string;
                        task: {
                            number: number;
                            id: string;
                            repo_owner: string;
                            repo_name: string;
                            forge: "github";
                            title: string;
                            body: string;
                            source: {
                                type: "unknown";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "issue";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "pull_request";
                            };
                            url: string;
                            type?: "issue" | "pull_request" | undefined;
                        };
                        org: {
                            name: string | null;
                            id: string;
                            created_at: Date;
                            handle: string;
                            description: string | null;
                            avatar_url: string | null;
                            stargazers_count: number | null;
                            tech: string[];
                            accepts_sponsorships: boolean;
                            members: {
                                id: string;
                                user: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    image: string | null;
                                    github_handle: string | null;
                                    youtube_handle: string | null;
                                    twitch_handle: string | null;
                                    orgs: {
                                        name: string | null;
                                        id: string;
                                        handle: string;
                                        avatar_url: string | null;
                                    }[];
                                };
                                created_at: Date;
                                is_admin: boolean;
                                weight: number;
                            }[];
                        };
                        reward: {
                            amount: number;
                            currency: "USD";
                        } | null;
                        reward_formatted: string | null;
                        reward_tiers: {
                            amount: number;
                            currency: "USD";
                            lower_bound: number;
                            upper_bound: number | null;
                            metric: "youtube_subs" | "youtube_views_last30";
                        }[];
                        created_at: Date;
                        bids: {
                            status: "pending" | "accepted";
                            id: string;
                            amount: number;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            currency: "USD";
                            created_at: Date;
                        }[];
                        updated_at: Date;
                        claims: {
                            status: "pending" | "accepted" | "payment_processing" | "payment_succeeded";
                            id: string;
                            created_at: Date;
                            updated_at: Date;
                            solver: {
                                id: number;
                                login: string;
                                avatar_url: string;
                                html_url: string;
                                name?: string | null | undefined;
                                company?: string | null | undefined;
                                location?: string | null | undefined;
                                twitter_username?: string | null | undefined;
                            };
                            url?: string | undefined;
                            pull_request_id?: number | undefined;
                            transfer_amount?: number | undefined;
                            transfer_currency?: "USD" | undefined;
                            transfer?: {
                                amount: number;
                                currency: "USD";
                            } | undefined;
                        }[];
                    }[];
                    next_cursor?: string | undefined;
                };
                _output_out: {
                    items: {
                        kind: "dev" | "content";
                        status: "active" | "inactive";
                        type: "standard" | "tip";
                        id: string;
                        task: {
                            number: number;
                            id: string;
                            repo_owner: string;
                            repo_name: string;
                            forge: "github";
                            title: string;
                            body: string;
                            source: {
                                type: "unknown";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "issue";
                            } | {
                                data: {
                                    id: number;
                                    user: {
                                        id: number;
                                        login: string;
                                        avatar_url: string;
                                        html_url: string;
                                        name?: string | null | undefined;
                                        company?: string | null | undefined;
                                        location?: string | null | undefined;
                                        twitter_username?: string | null | undefined;
                                    };
                                    html_url: string;
                                    title: string;
                                    body?: string | null | undefined;
                                };
                                type: "pull_request";
                            };
                            url: string;
                            type?: "issue" | "pull_request" | undefined;
                        };
                        org: {
                            name: string | null;
                            id: string;
                            created_at: Date;
                            handle: string;
                            description: string | null;
                            avatar_url: string | null;
                            stargazers_count: number | null;
                            tech: string[];
                            accepts_sponsorships: boolean;
                            members: {
                                id: string;
                                user: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    image: string | null;
                                    github_handle: string | null;
                                    youtube_handle: string | null;
                                    twitch_handle: string | null;
                                    orgs: {
                                        name: string | null;
                                        id: string;
                                        handle: string;
                                        avatar_url: string | null;
                                    }[];
                                };
                                created_at: Date;
                                is_admin: boolean;
                                weight: number;
                            }[];
                        };
                        reward: {
                            amount: number;
                            currency: "USD";
                        } | null;
                        reward_formatted: string | null;
                        reward_tiers: {
                            amount: number;
                            currency: "USD";
                            lower_bound: number;
                            upper_bound: number | null;
                            metric: "youtube_subs" | "youtube_views_last30";
                        }[];
                        created_at: Date;
                        bids: {
                            status: "pending" | "accepted";
                            id: string;
                            amount: number;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            currency: "USD";
                            created_at: Date;
                        }[];
                        updated_at: Date;
                        claims: {
                            status: "pending" | "accepted" | "payment_processing" | "payment_succeeded";
                            id: string;
                            created_at: Date;
                            updated_at: Date;
                            solver: {
                                id: number;
                                login: string;
                                avatar_url: string;
                                html_url: string;
                                name?: string | null | undefined;
                                company?: string | null | undefined;
                                location?: string | null | undefined;
                                twitter_username?: string | null | undefined;
                            };
                            url?: string | undefined;
                            pull_request_id?: number | undefined;
                            transfer_amount?: number | undefined;
                            transfer_currency?: "USD" | undefined;
                            transfer?: {
                                amount: number;
                                currency: "USD";
                            } | undefined;
                        }[];
                    }[];
                    next_cursor?: string | undefined;
                };
            }, unknown>>;
        };
        update: {
            mutate: _trpc_client.Resolver<_trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T_6 = unknown>(string: string) => T_6;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1_5 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1_5;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I_5, O_5 extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I_5, O_5>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: {
                    [x: string]: never;
                };
                _input_in: {
                    org_id: string;
                    id: string;
                    reward?: {
                        amount: number;
                        currency: "USD";
                    } | undefined;
                    status?: "active" | "inactive" | undefined;
                };
                _input_out: {
                    org_id: string;
                    id: string;
                    reward?: {
                        amount: number;
                        currency: "USD";
                    } | undefined;
                    status?: "active" | "inactive" | undefined;
                };
                _output_in: {
                    kind: "dev" | "content";
                    status: "active" | "inactive";
                    type: "standard" | "tip";
                    id: string;
                    task: {
                        number: number;
                        id: string;
                        repo_owner: string;
                        repo_name: string;
                        forge: "github";
                        title: string;
                        body: string;
                        source: {
                            type: "unknown";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "issue";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "pull_request";
                        };
                        url: string;
                        type?: "issue" | "pull_request" | undefined;
                    };
                    org: {
                        name: string | null;
                        id: string;
                        created_at: Date;
                        handle: string;
                        description: string | null;
                        avatar_url: string | null;
                        stargazers_count: number | null;
                        tech: string[];
                        accepts_sponsorships: boolean;
                        members: {
                            id: string;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            created_at: Date;
                            is_admin: boolean;
                            weight: number;
                        }[];
                    };
                    reward: {
                        amount: number;
                        currency: "USD";
                    } | null;
                    reward_formatted: string | null;
                    reward_tiers: {
                        amount: number;
                        currency: "USD";
                        lower_bound: number;
                        upper_bound: number | null;
                        metric: "youtube_subs" | "youtube_views_last30";
                    }[];
                    created_at: Date;
                    bids: {
                        status: "pending" | "accepted";
                        id: string;
                        amount: number;
                        user: {
                            name: string | null;
                            id: string;
                            handle: string;
                            image: string | null;
                            github_handle: string | null;
                            youtube_handle: string | null;
                            twitch_handle: string | null;
                            orgs: {
                                name: string | null;
                                id: string;
                                handle: string;
                                avatar_url: string | null;
                            }[];
                        };
                        currency: "USD";
                        created_at: Date;
                    }[];
                    updated_at: Date;
                };
                _output_out: {
                    kind: "dev" | "content";
                    status: "active" | "inactive";
                    type: "standard" | "tip";
                    id: string;
                    task: {
                        number: number;
                        id: string;
                        repo_owner: string;
                        repo_name: string;
                        forge: "github";
                        title: string;
                        body: string;
                        source: {
                            type: "unknown";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "issue";
                        } | {
                            data: {
                                id: number;
                                user: {
                                    id: number;
                                    login: string;
                                    avatar_url: string;
                                    html_url: string;
                                    name?: string | null | undefined;
                                    company?: string | null | undefined;
                                    location?: string | null | undefined;
                                    twitter_username?: string | null | undefined;
                                };
                                html_url: string;
                                title: string;
                                body?: string | null | undefined;
                            };
                            type: "pull_request";
                        };
                        url: string;
                        type?: "issue" | "pull_request" | undefined;
                    };
                    org: {
                        name: string | null;
                        id: string;
                        created_at: Date;
                        handle: string;
                        description: string | null;
                        avatar_url: string | null;
                        stargazers_count: number | null;
                        tech: string[];
                        accepts_sponsorships: boolean;
                        members: {
                            id: string;
                            user: {
                                name: string | null;
                                id: string;
                                handle: string;
                                image: string | null;
                                github_handle: string | null;
                                youtube_handle: string | null;
                                twitch_handle: string | null;
                                orgs: {
                                    name: string | null;
                                    id: string;
                                    handle: string;
                                    avatar_url: string | null;
                                }[];
                            };
                            created_at: Date;
                            is_admin: boolean;
                            weight: number;
                        }[];
                    };
                    reward: {
                        amount: number;
                        currency: "USD";
                    } | null;
                    reward_formatted: string | null;
                    reward_tiers: {
                        amount: number;
                        currency: "USD";
                        lower_bound: number;
                        upper_bound: number | null;
                        metric: "youtube_subs" | "youtube_views_last30";
                    }[];
                    created_at: Date;
                    bids: {
                        status: "pending" | "accepted";
                        id: string;
                        amount: number;
                        user: {
                            name: string | null;
                            id: string;
                            handle: string;
                            image: string | null;
                            github_handle: string | null;
                            youtube_handle: string | null;
                            twitch_handle: string | null;
                            orgs: {
                                name: string | null;
                                id: string;
                                handle: string;
                                avatar_url: string | null;
                            }[];
                        };
                        currency: "USD";
                        created_at: Date;
                    }[];
                    updated_at: Date;
                };
            }, unknown>>;
        };
    };
    org: {
        addMember: {
            mutate: _trpc_client.Resolver<_trpc_server.BuildProcedure<"mutation", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T_7 = unknown>(string: string) => T_7;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1_6 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1_6;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I_6, O_6 extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I_6, O_6>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: {
                    [x: string]: never;
                };
                _input_in: {
                    org_id: string;
                    handle: string;
                };
                _input_out: {
                    org_id: string;
                    handle: string;
                };
                _output_in: {
                    id: string;
                    user: {
                        name: string | null;
                        id: string;
                        handle: string;
                        image: string | null;
                        github_handle: string | null;
                        youtube_handle: string | null;
                        twitch_handle: string | null;
                        orgs: {
                            name: string | null;
                            id: string;
                            handle: string;
                            avatar_url: string | null;
                        }[];
                    };
                    created_at: Date;
                    is_admin: boolean;
                    weight: number;
                };
                _output_out: {
                    id: string;
                    user: {
                        name: string | null;
                        id: string;
                        handle: string;
                        image: string | null;
                        github_handle: string | null;
                        youtube_handle: string | null;
                        twitch_handle: string | null;
                        orgs: {
                            name: string | null;
                            id: string;
                            handle: string;
                            avatar_url: string | null;
                        }[];
                    };
                    created_at: Date;
                    is_admin: boolean;
                    weight: number;
                };
            }, unknown>>;
        };
        get: {
            query: _trpc_client.Resolver<_trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T_8 = unknown>(string: string) => T_8;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1_7 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1_7;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I_7, O_7 extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I_7, O_7>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: Record<string, never>;
                _input_in: {
                    org: string;
                };
                _input_out: {
                    org: string;
                };
                _output_in: {
                    name: string | null;
                    id: string;
                    created_at: Date;
                    handle: string;
                    description: string | null;
                    avatar_url: string | null;
                    stargazers_count: number | null;
                    tech: string[];
                    accepts_sponsorships: boolean;
                    members: {
                        id: string;
                        user: {
                            name: string | null;
                            id: string;
                            handle: string;
                            image: string | null;
                            github_handle: string | null;
                            youtube_handle: string | null;
                            twitch_handle: string | null;
                            orgs: {
                                name: string | null;
                                id: string;
                                handle: string;
                                avatar_url: string | null;
                            }[];
                        };
                        created_at: Date;
                        is_admin: boolean;
                        weight: number;
                    }[];
                };
                _output_out: {
                    name: string | null;
                    id: string;
                    created_at: Date;
                    handle: string;
                    description: string | null;
                    avatar_url: string | null;
                    stargazers_count: number | null;
                    tech: string[];
                    accepts_sponsorships: boolean;
                    members: {
                        id: string;
                        user: {
                            name: string | null;
                            id: string;
                            handle: string;
                            image: string | null;
                            github_handle: string | null;
                            youtube_handle: string | null;
                            twitch_handle: string | null;
                            orgs: {
                                name: string | null;
                                id: string;
                                handle: string;
                                avatar_url: string | null;
                            }[];
                        };
                        created_at: Date;
                        is_admin: boolean;
                        weight: number;
                    }[];
                };
            }, unknown>>;
        };
        getEarningsByCountry: {
            query: _trpc_client.Resolver<_trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T_9 = unknown>(string: string) => T_9;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1_8 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1_8;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I_8, O_8 extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I_8, O_8>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: Record<string, never>;
                _input_in: {
                    org?: string | undefined;
                };
                _input_out: {
                    org?: string | undefined;
                };
                _output_in: {
                    amount: number;
                    country: string;
                    lat: number;
                    lng: number;
                }[];
                _output_out: {
                    amount: number;
                    country: string;
                    lat: number;
                    lng: number;
                }[];
            }, unknown>>;
        };
        getLeaderboard: {
            query: _trpc_client.Resolver<_trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T_10 = unknown>(string: string) => T_10;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1_9 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1_9;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I_9, O_9 extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I_9, O_9>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: Record<string, never>;
                _input_in: {
                    org?: string | undefined;
                };
                _input_out: {
                    org?: string | undefined;
                };
                _output_in: {
                    id: number;
                    user: {
                        id: number;
                        login: string;
                        avatar_url: string;
                        html_url: string;
                        name?: string | null | undefined;
                        company?: string | null | undefined;
                        location?: string | null | undefined;
                        twitter_username?: string | null | undefined;
                    };
                    stats: {
                        num_completed_bounties: number;
                        total_earnings: number;
                    };
                }[];
                _output_out: {
                    id: number;
                    user: {
                        id: number;
                        login: string;
                        avatar_url: string;
                        html_url: string;
                        name?: string | null | undefined;
                        company?: string | null | undefined;
                        location?: string | null | undefined;
                        twitter_username?: string | null | undefined;
                    };
                    stats: {
                        num_completed_bounties: number;
                        total_earnings: number;
                    };
                }[];
            }, unknown>>;
        };
        getMembers: {
            query: _trpc_client.Resolver<_trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T_11 = unknown>(string: string) => T_11;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1_10 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1_10;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I_10, O_10 extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I_10, O_10>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: {
                    [x: string]: never;
                };
                _input_in: {
                    org_id: string;
                    id: string;
                };
                _input_out: {
                    org_id: string;
                    id: string;
                };
                _output_in: {
                    id: string;
                    user: {
                        name: string | null;
                        id: string;
                        handle: string;
                        image: string | null;
                        github_handle: string | null;
                        youtube_handle: string | null;
                        twitch_handle: string | null;
                        orgs: {
                            name: string | null;
                            id: string;
                            handle: string;
                            avatar_url: string | null;
                        }[];
                    };
                    created_at: Date;
                    is_admin: boolean;
                    weight: number;
                }[];
                _output_out: {
                    id: string;
                    user: {
                        name: string | null;
                        id: string;
                        handle: string;
                        image: string | null;
                        github_handle: string | null;
                        youtube_handle: string | null;
                        twitch_handle: string | null;
                        orgs: {
                            name: string | null;
                            id: string;
                            handle: string;
                            avatar_url: string | null;
                        }[];
                    };
                    created_at: Date;
                    is_admin: boolean;
                    weight: number;
                }[];
            }, unknown>>;
        };
        getStats: {
            query: _trpc_client.Resolver<_trpc_server.BuildProcedure<"query", {
                _config: _trpc_server.RootConfig<{
                    ctx: Record<string, never>;
                    meta: trpc_openapi.OpenApiMeta<{
                        [x: string]: unknown;
                    }>;
                    errorShape: _trpc_server.DefaultErrorShape;
                    transformer: {
                        stringify: (object: any) => string;
                        parse: <T_12 = unknown>(string: string) => T_12;
                        serialize: (object: any) => superjson_dist_types.SuperJSONResult;
                        deserialize: <T_1_11 = unknown>(payload: superjson_dist_types.SuperJSONResult) => T_1_11;
                        registerClass: (v: superjson_dist_types.Class, options?: string | superjson_dist_class_registry.RegisterOptions | undefined) => void;
                        registerSymbol: (v: symbol, identifier?: string | undefined) => void;
                        registerCustom: <I_11, O_11 extends superjson_dist_types.JSONValue>(transformer: Omit<superjson_dist_custom_transformer_registry.CustomTransfomer<I_11, O_11>, "name">, name: string) => void;
                        allowErrorProps: (...props: string[]) => void;
                    };
                }>;
                _meta: trpc_openapi.OpenApiMeta<{
                    [x: string]: unknown;
                }>;
                _ctx_out: Record<string, never>;
                _input_in: {
                    id: string;
                };
                _input_out: {
                    id: string;
                };
                _output_in: {
                    open_bounties: {
                        count: number;
                        sum: number;
                    };
                    completed_bounties: {
                        count: number;
                        sum: number;
                    };
                    completed_tips: {
                        count: number;
                        sum: number;
                    };
                    solvers: {
                        total: number;
                        new: number;
                    };
                };
                _output_out: {
                    open_bounties: {
                        count: number;
                        sum: number;
                    };
                    completed_bounties: {
                        count: number;
                        sum: number;
                    };
                    completed_tips: {
                        count: number;
                        sum: number;
                    };
                    solvers: {
                        total: number;
                        new: number;
                    };
                };
            }, unknown>>;
        };
    };
};

export { AlgoraInput, AlgoraOutput, algora };
